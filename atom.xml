<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://victoryfan.github.io</id>
    <title>Gridea</title>
    <updated>2020-11-13T08:02:16.476Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://victoryfan.github.io"/>
    <link rel="self" href="https://victoryfan.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://victoryfan.github.io/images/avatar.png</logo>
    <icon>https://victoryfan.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[TCP三次四次握手]]></title>
        <id>https://victoryfan.github.io/post/tcp-san-ci-si-ci-wo-shou/</id>
        <link href="https://victoryfan.github.io/post/tcp-san-ci-si-ci-wo-shou/">
        </link>
        <updated>2020-11-11T07:21:35.000Z</updated>
        <content type="html"><![CDATA[<h2 id="计算机网络体系结构">计算机网络体系结构</h2>
<p>在计算机网络的基本概念中，分层次的体系结构是最基本的。</p>
<p><strong>网络协议是什么？</strong><br>
在计算机网络要做到有条不紊地交换数据，就必须遵守一些事先约定好的规则，比如交换数据的格式、是否需要发送一个应答悉尼下。这些规则被称为网络协议。</p>
<h2 id="为什么要对网络协议分层">为什么要对网络协议分层？</h2>
<ul>
<li>简化问题难度和复杂度。由于各层之间独立，我们可以分割大问题为小问题。</li>
<li>灵活性好。当其中一层的技术发生变化，只要层间接口关系保持不变，其他层不受影响。</li>
<li>易于实现和维护。</li>
<li>促进标准化工作。分开后，每层功能可以相对简单地被描述。</li>
</ul>
<p><strong>网络协议分层的缺点：</strong> 功能可能出现在多个层里，产生了额外开销。<br>
为了使不同体系结构的计算机网络都能互联，国际标准化组织 ISO 于1977年提出了一个试图使各种计算机在世界范围内互联成网的标准框架，即著名的开放系统互联基本参考模型 OSI/RM，简称为OSI。</p>
<p>OSI 的七层协议体系结构的概念清楚，理论也较完整，但它既复杂又不实用，TCP/IP 体系结构则不同，但它现在却得到了非常广泛的应用。TCP/IP 是一个四层体系结构，它包含应用层，运输层，网际层和网络接口层（用网际层这个名字是强调这一层是为了解决不同网络的互连问题），不过从实质上讲，TCP/IP 只有最上面的三层，因为最下面的网络接口层并没有什么具体内容，因此在学习计算机网络的原理时往往采用折中的办法，即综合 OSI 和 TCP/IP 的优点，采用一种只有五层协议的体系结构，这样既简洁又能将概念阐述清楚，有时为了方便，也可把最底下两层称为网络接口层。</p>
<p><strong>四层协议，五层协议和七层协议的关系如下：</strong></p>
<ul>
<li>TCP/IP是一个四层的体系结构，主要包括：应用层、运输层、网际层和网络接口层。</li>
<li>五层协议的体系结构主要包括：应用层、运输层、网络层、数据链路层和物理层。</li>
<li>OSI七层协议模型主要包括：应用层（Application）、表示层（Presentation）、会话层（Session）、运输层（Transport）、网络层（Network）、数据链路层（Data Link）、物理层（Physical）。</li>
</ul>
<p><em>注：</em> 五层协议的体系结构只是为了介绍网络原理而设计的，实际应用还是 TCP/IP 四层体系结构。</p>
<h2 id="tcpip协议族">TCP/IP协议族</h2>
<p><strong>应用层</strong><br>
应用层( application-layer ）的任务是通过应用进程间的交互来完成特定网络应用。应用层协议定义的是应用进程（进程：主机中正在运行的程序）间的通信和交互的规则。</p>
<p>对于不同的网络应用需要不同的应用层协议。在互联网中应用层协议很多，如域名系统 DNS，支持万维网应用的 HTTP 协议，支持电子邮件的 SMTP 协议等等。</p>
<p><strong>运输层</strong><br>
运输层(transport layer)的主要任务就是负责向两台主机进程之间的通信提供通用的数据传输服务。应用进程利用该服务传送应用层报文。</p>
<p><em><strong>运输层主要使用以下两种协议：</strong></em></p>
<ol>
<li>传输控制协议-TCP：提供面向连接的，可靠的数据传输服务。</li>
<li>用户数据协议-UDP：提供无连接的，尽最大努力的数据传输服务（不保证数据传输的可靠性）。</li>
</ol>
<table>
<thead>
<tr>
<th></th>
<th>UDP</th>
<th>TCP</th>
</tr>
</thead>
<tbody>
<tr>
<td>是否连续</td>
<td>无连接</td>
<td>面向连接</td>
</tr>
<tr>
<td>是否可靠</td>
<td>不可靠传输，不实用流量控制和拥塞控制</td>
<td>可靠传输，使用流量控制和拥塞控制</td>
</tr>
<tr>
<td>连接对象个数</td>
<td>支持一对一、一对多、多对一和多对多交互通信</td>
<td>只能一对一通信</td>
</tr>
<tr>
<td>传输方式</td>
<td>面向报文</td>
<td>面向字节流</td>
</tr>
<tr>
<td>首部开销</td>
<td>首部开销小，仅8字节</td>
<td>首部最小20字节，最大60字节</td>
</tr>
<tr>
<td>场景</td>
<td>适用于实时应用（IP电话、视频电话、直播等）</td>
<td>适用于要求可靠传输的应用，例如文件传输</td>
</tr>
</tbody>
</table>
<p><strong>每一个应用层（TCP/IP参考模型的最高层）协议一般都会使用到两个传输层协议之一：</strong><br>
运行在TCP协议上的协议：</p>
<ul>
<li>HTTP（Hypertext Transfer Protocol，超文本传输协议），主要用于普通浏览。</li>
<li>HTTPS（HTTP over SSL，安全超文本传输协议）,HTTP协议的安全版本。</li>
<li>FTP（File Transfer Protocol，文件传输协议），用于文件传输。</li>
<li>POP3（Post Office Protocol, version 3，邮局协议），收邮件用。</li>
<li>SMTP（Simple Mail Transfer Protocol，简单邮件传输协议），用来发送电子邮件。</li>
<li>TELNET（Teletype over the Network，网络电传），通过一个终端（terminal）登陆到网络。</li>
<li>SSH（Secure Shell，用于替代安全性差的TELNET），用于加密安全登陆用。</li>
</ul>
<p>运行在UDP协议上的协议：</p>
<ul>
<li>BOOTP（Boot Protocol，启动协议），应用于无盘设备。</li>
<li>NTP（Network Time Protocol，网络时间协议），用于网络同步。</li>
<li>DHCP（Dynamic Host Configuration Protocol，动态主机配置协议），动态配置IP地址。</li>
</ul>
<p>运行在TCP和UDP协议上：</p>
<ul>
<li>DNS（Domain Name Service，域名服务），用于完成地址查找，邮件转发等工作。</li>
</ul>
<p><strong>网络层</strong><br>
网络层的任务就是选择合适的网间路由和交换节点，确保计算机通信的数据及时传送。在发送数据时，网络层把运输层产生的报文段或用户数据报封装成分组和包进行传送。在 TCP/IP 体系结构中，由于网络层使用 IP 协议，因此分组也叫 IP 数据报，简称数据报。</p>
<p>互联网是由大量的异构（heterogeneous）网络通过路由器（router）相互连接起来的。互联网使用的网络层协议是无连接的网际协议（Internet Protocol）和许多路由选择协议，因此互联网的网络层也叫做网际层或 IP 层。</p>
<p><strong>数据链路层</strong><br>
数据链路层(data link layer)通常简称为链路层。两台主机之间的数据传输，总是在一段一段的链路上传送的，这就需要使用专门的链路层的协议。</p>
<p>在两个相邻节点之间传送数据时，数据链路层将网络层交下来的 IP 数据报组装成帧，在两个相邻节点间的链路上传送帧。每一帧包括数据和必要的控制信息（如同步信息，地址信息，差错控制等）。</p>
<p>在接收数据时，控制信息使接收端能够知道一个帧从哪个比特开始和到哪个比特结束。</p>
<p><em>一般的web应用的通信传输流是这样的：</em></p>
<figure data-type="image" tabindex="1"><img src="https://victoryfan.github.io/post-images/1605253512389.jpg" alt="" loading="lazy"></figure>
<p>发送端在层与层之间传输数据时，每经过一层时会被打上一个该层所属的首部信息。反之，接收端在层与层之间传输数据时，每经过一层时会把对应的首部信息去除。</p>
<p><strong>物理层</strong><br>
在物理层上所传送的数据单位是比特。物理层(physical layer)的作用是实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异。使其上面的数据链路层不必考虑网络的具体传输介质是什么。“透明传送比特流”表示经实际电路传送后的比特流没有发生变化，对传送的比特流来说，这个电路好像是看不见的。</p>
<p><strong>TCP/IP 协议族</strong><br>
在互联网使用的各种协议中最重要和最著名的就是 TCP/IP 两个协议。现在人们经常提到的 TCP/IP 并不一定是单指 TCP 和 IP 这两个具体的协议，而往往是表示互联网所使用的整个 TCP/IP 协议族。<br>
<img src="https://victoryfan.github.io/post-images/1605253717484.jpg" alt="" loading="lazy"></p>
<p>互联网协议套件（英语：Internet Protocol Suite，缩写IPS）是一个网络通讯模型，以及一整个网络传输协议家族，为网际网络的基础通讯架构。它常被通称为TCP/IP协议族（英语：TCP/IP Protocol Suite，或TCP/IP Protocols），简称TCP/IP。因为该协定家族的两个核心协定：TCP（传输控制协议）和IP（网际协议），为该家族中最早通过的标准。</p>
<p><strong>重点：</strong><br>
TCP（传输控制协议）和IP（网际协议） 是最先定义的两个核心协议，所以才统称为TCP/IP协议族。</p>
<p><strong>TCP的三次握手四次挥手</strong><br>
TCP是一种面向连接的、可靠的、基于字节流的传输层通信协议，在发送数据前，通信双方必须在彼此间建立一条连接。所谓的“连接”，其实是客户端和服务端保存的一份关于对方的信息，如ip地址、端口号等。</p>
<p>TCP可以看成是一种字节流，它会处理IP层或以下的层的丢包、重复以及错误问题。在连接的建立过程中，双方需要交换一些连接的参数。这些参数可以放在TCP头部。</p>
<p>一个TCP连接由一个4元组构成，分别是两个IP地址和两个端口号。一个TCP连接通常分为三个阶段：连接、数据传输、退出（关闭）。<strong>通过三次握手建立一个链接，通过四次挥手来关闭一个连接。</strong></p>
<p><strong>当一个连接被建立或被终止时，交换的报文段只包含TCP头部，而没有数据。</strong></p>
<p><strong>TCP报文的头部结构</strong><br>
在了解TCP连接之前先来了解一下TCP报文的头部结构。<br>
<img src="https://victoryfan.github.io/post-images/1605253987472.jpg" alt="" loading="lazy"></p>
<p>上图中有几个字段需要重点介绍下：<br>
（1）序号：seq序号，占32位，用来标识从TCP源端向目的端发送的字节流，发起方发送数据时对此进行标记。<br>
（2）确认序号：ack序号，占32位，只有ACK标志位为1时，确认序号字段才有效，ack=seq+1。<br>
（3）标志位：共6个，即URG、ACK、PSH、RST、SYN、FIN等，具体含义如下：</p>
<ul>
<li>ACK：确认序号有效。</li>
<li>FIN：释放一个连接。</li>
<li>PSH：接收方应该尽快将这个报文交给应用层。</li>
<li>RST：重置连接。</li>
<li>SYN：发起一个新连接。</li>
<li>URG：紧急指针（urgent pointer）有效。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[10个冷门但实用的Docker实用技巧]]></title>
        <id>https://victoryfan.github.io/post/10-ge-leng-men-dan-shi-yong-de-docker-shi-yong-ji-qiao/</id>
        <link href="https://victoryfan.github.io/post/10-ge-leng-men-dan-shi-yong-de-docker-shi-yong-ji-qiao/">
        </link>
        <updated>2020-11-10T06:19:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1-docker-top">1、docker top</h3>
<p>这个命令用来查看一个容器里面的进程信息，如：</p>
<pre><code>docker top int
UID   PID    PPID   C    STIME  TTY   TIME         CMD
root  21119  24419  99   Nov09   ?    1-00:21:33   /usr/local/bin/node ./src/client/host/startNode.js
root  24419  24390   0   Nov09   ?    00:00:00     node ./src/tool/startDPeer.js --main --rpchost 0.0.0.0 --rpcport 7001
</code></pre>
<h3 id="2-docker-load-docker-save">2、docker load &amp;&amp; docker save</h3>
<p>一般使用这两个命令去下载打包Kubernetes的镜像，因为国内的网速有些慢。</p>
<p>docker save 可以把一个镜像保存到 tar 文件中，如：</p>
<pre><code>root@c02_walletnode_server_test_v_hk:~# docker save node:8.12.0 &gt;node-8.12.0.tar
#同时 docker load 可以把镜像从 tar 文件导入到 docker 中
root@c02_walletnode_server_test_v_hk:~# docker load &lt; node-8.12.0.tar
</code></pre>
<h3 id="3-docker-search">3、docker search</h3>
<p>这个命令可以在命令行中方便的搜索 DockerHub 中的镜像，比如：</p>
<pre><code>root@c02_walletnode_server_test_v_hk:~# docker search nginx
NAME                               DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED
nginx                              Official build of Nginx.                        13988               [OK]
jwilder/nginx-proxy                Automated Nginx reverse proxy for docker con…   1908                                    [OK]
richarvey/nginx-php-fpm            Container running Nginx + PHP-FPM capable of…   791                                     [OK]
linuxserver/nginx                  An Nginx container, brought to you by LinuxS…   128
jc21/nginx-proxy-manager           Docker container for managing Nginx proxy ho…   109
tiangolo/nginx-rtmp                Docker image with Nginx using the nginx-rtmp…   103                                     [OK]
bitnami/nginx                      Bitnami nginx Docker Image                      90                                      [OK]
alfg/nginx-rtmp                    NGINX, nginx-rtmp-module and FFmpeg from sou…   80                                      [OK]
jlesage/nginx-proxy-manager        Docker container for Nginx Proxy Manager        67                                      [OK]
nginxdemos/hello                   NGINX webserver that serves a simple page co…   63                                      [OK]
nginx/nginx-ingress                NGINX Ingress Controller for Kubernetes         45
privatebin/nginx-fpm-alpine        PrivateBin running on an Nginx, php-fpm &amp; Al…   40                                      [OK]
nginxinc/nginx-unprivileged        Unprivileged NGINX Dockerfiles                  19
schmunk42/nginx-redirect           A very simple container to redirect HTTP tra…   19                                      [OK]
nginx/nginx-prometheus-exporter    NGINX Prometheus Exporter                       15
centos/nginx-112-centos7           Platform for running nginx 1.12 or building …   15
staticfloat/nginx-certbot          Opinionated setup for automatic TLS certs lo…   14                                      [OK]
raulr/nginx-wordpress              Nginx front-end for the official wordpress:f…   13                                      [OK]
centos/nginx-18-centos7            Platform for running nginx 1.8 or building n…   13
flashspys/nginx-static             Super Lightweight Nginx Image                   7                                       [OK]
bitwarden/nginx                    The Bitwarden nginx web server acting as a r…   7
mailu/nginx                        Mailu nginx frontend                            7                                       [OK]
bitnami/nginx-ingress-controller   Bitnami Docker Image for NGINX Ingress Contr…   6                                       [OK]
ansibleplaybookbundle/nginx-apb    An APB to deploy NGINX                          1                                       [OK]
wodby/nginx                        Generic nginx                                   1                                       [OK]
</code></pre>
<h3 id="4-docker-events">4、docker events</h3>
<p>获取 docker 的各种事件信息，比如创建了一个容器什么的。</p>
<pre><code>docker events
2020-07-28T21:28:46.000403018+08:00 image load sha256:432bf69f0427b52cad10897342eaf23521b7d973566354118e9a59c4d31b5fae (name=sha256:432bf69f0427b52cad10897342eaf23521b7d973566354118e9a59c4d31b5fae)
</code></pre>
<h3 id="5-docker-update">5、docker update</h3>
<p>当 docker run 了之后却发现里面有一些参数并不是你想要的状态比如你设置的 nginx 容器 cpu 或内存大小，这个时候你就可以使用 docker update 去修改这些参数。</p>
<pre><code>docker update nginx --cpus 2
</code></pre>
<h3 id="6-docker-history">6、docker history</h3>
<p>当你修改了一个镜像，但是忘记了每一层的修改命令，或者你想查看一个镜像是怎么构建的时候就可以使用这个命令，比如：</p>
<pre><code>root@c02_walletnode_server_test_v_hk:~# docker history int
IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
1456ce379a71        38 hours ago        /bin/sh -c #(nop)  CMD [&quot;node&quot; &quot;./src/tool/s…   0B
286deaa63603        38 hours ago        /bin/sh -c #(nop)  EXPOSE 7001                  0B
037b119e344c        38 hours ago        /bin/sh -c #(nop) WORKDIR /home/nodeapp/int     0B
f690f91a1762        38 hours ago        /bin/sh -c cd /home/nodeapp/int &amp;&amp; npm insta…   39.3MB
6f8a531c291d        38 hours ago        /bin/sh -c mkdir -p /home/nodeapp/ &amp;&amp; cd /ho…   5.05MB
4e06a9fee726        38 hours ago        /bin/sh -c apt-get install git                  0B
ce426dead114        24 months ago       /bin/sh -c #(nop)  CMD [&quot;node&quot;]                 0B
&lt;missing&gt;           24 months ago       /bin/sh -c set -ex   &amp;&amp; for key in     6A010…   4.5MB
&lt;missing&gt;           24 months ago       /bin/sh -c #(nop)  ENV YARN_VERSION=1.9.4       0B
&lt;missing&gt;           24 months ago       /bin/sh -c ARCH= &amp;&amp; dpkgArch=&quot;$(dpkg --print…   53.8MB
&lt;missing&gt;           24 months ago       /bin/sh -c #(nop)  ENV NODE_VERSION=8.12.0      0B
&lt;missing&gt;           24 months ago       /bin/sh -c set -ex   &amp;&amp; for key in     94AE3…   141kB
&lt;missing&gt;           24 months ago       /bin/sh -c groupadd --gid 1000 node   &amp;&amp; use…   335kB
&lt;missing&gt;           24 months ago       /bin/sh -c set -ex;  apt-get update;  apt-ge…   320MB
&lt;missing&gt;           24 months ago       /bin/sh -c apt-get update &amp;&amp; apt-get install…   123MB
&lt;missing&gt;           24 months ago       /bin/sh -c set -ex;  if ! command -v gpg &gt; /…   0B
&lt;missing&gt;           24 months ago       /bin/sh -c apt-get update &amp;&amp; apt-get install…   41.1MB
&lt;missing&gt;           24 months ago       /bin/sh -c #(nop)  CMD [&quot;bash&quot;]                 0B
&lt;missing&gt;           24 months ago       /bin/sh -c #(nop) ADD file:0b25d0012989e20b9…   127MB
</code></pre>
<h3 id="7-docker-wait">7、 docker wait</h3>
<p>这个命令可以查看容器的退出状态，比如：</p>
<pre><code>root@c02_walletnode_server_test_v_hk:~# docker wait int
137
</code></pre>
<h3 id="8-docker-pause-docker-unpause">8、docker pause &amp;&amp; docker unpause</h3>
<p>当你运行了一个容器但是想要暂停它运行的时候，就可以使用这个命令。</p>
<pre><code>docker pause int
docker unpause int
</code></pre>
<h3 id="9-docker-diff">9、docker diff</h3>
<p>当你运行了一个容器，但是你不知道容器里修改了哪一些文件的时候可以使用这个命令，比如：</p>
<pre><code>root@c02_walletnode_server_test_v_hk:~# docker diff int
C /home
C /home/nodeapp
C /home/nodeapp/int
C /home/nodeapp/int/data
C /home/nodeapp/int/data/intchain
A /home/nodeapp/int/data/intchain/.options.json
A /home/nodeapp/int/data/intchain/peerData
C /root
A /root/.bash_history
</code></pre>
<h3 id="10-docker-stats">10、docker stats</h3>
<p>这个是 docker 内置的监控命令，当你想查看当前主机下所有容器占用内存和 cpu 的情况的时候就可以使用这个命令。</p>
<pre><code>root@c02_walletnode_server_test_v_hk:~# docker stats

CONTAINER ID        NAME                           CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS
f278b86b9169        mocknet_stacks-node-follower   22.79%              65.09MiB / 62.91GiB   0.10%               6.73MB / 12MB       0B / 0B             4
25c4f5503d7d        mocknet_explorer               0.14%               68.5MiB / 62.91GiB    0.11%               1.52kB / 0B         0B / 0B             18
20fe840c19a5        mocknet_stacks-node-api        0.39%               98.35MiB / 62.91GiB   0.15%               14.7MB / 15.2MB     0B / 0B             22
d6e08253c502        mocknet_postgres               0.63%               21.96MiB / 62.91GiB   0.03%               12.2MB / 4.82MB     0B / 0B             8
bbc9c57ce680        mocknet_stacks-node-miner      1.10%               62.75MiB / 62.91GiB   0.10%               3.49MB / 3.72MB     0B / 0B             2
ebb3f75adc59        int                            91.52%              159.5MiB / 62.91GiB   0.25%               64.5MB / 2.78MB     0B / 0B             16
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数据结构与算法]]></title>
        <id>https://victoryfan.github.io/post/shu-ju-jie-gou-yu-suan-fa/</id>
        <link href="https://victoryfan.github.io/post/shu-ju-jie-gou-yu-suan-fa/">
        </link>
        <updated>2020-11-05T05:18:41.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-数据结构和算法概述">一、数据结构和算法概述</h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://victoryfan.github.io/post/hello-gridea/</id>
        <link href="https://victoryfan.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>